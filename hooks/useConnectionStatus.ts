import { useEffect, useRef, useState } from "react";

export function useConnectionStatus() {
  const [isOnline, setIsOnline] = useState<boolean | null>(null);
  const [isNetworkHealthy, setIsNetworkHealthy] = useState<boolean>(true);
  const previousStatusRef = useRef<string | null>(null);

  useEffect(() => {
    // VÃ©rifier si on est cÃ´tÃ© client
    if (typeof window === "undefined") {
      return;
    }

    // Ã‰tat initial
    const updateOnlineStatus = () => {
      setIsOnline(navigator.onLine);
    };

    // VÃ©rifier la connectivitÃ© rÃ©seau
    const checkNetworkHealth = async () => {
      try {
        // Essayer de faire une requÃªte lÃ©gÃ¨re pour vÃ©rifier la connectivitÃ©
        const response = await fetch("/api/statistiques", {
          method: "HEAD",
          cache: "no-cache",
        });
        setIsNetworkHealthy(response.ok);
      } catch (error) {
        setIsNetworkHealthy(false);
      }
    };

    // Ã‰tat initial
    updateOnlineStatus();
    checkNetworkHealth();

    // Ã‰couteurs d'Ã©vÃ©nements
    const handleOnline = () => {
      console.log("ðŸŸ¢ Ã‰vÃ©nement 'online' dÃ©tectÃ©");
      setIsOnline(true);
      // Re-vÃ©rifier la connectivitÃ© rÃ©seau quand on revient en ligne
      setTimeout(checkNetworkHealth, 1000);
    };

    const handleOffline = () => {
      console.log("ðŸ”´ Ã‰vÃ©nement 'offline' dÃ©tectÃ©");
      setIsOnline(false);
      setIsNetworkHealthy(false);
    };

    // Ã‰couter les changements de connectivitÃ©
    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);

    // VÃ©rifier pÃ©riodiquement la connectivitÃ© rÃ©seau (toutes les 30 secondes)
    const networkCheckInterval = setInterval(checkNetworkHealth, 30000);

    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
      clearInterval(networkCheckInterval);
    };
  }, []);

  // Calculer le statut actuel
  const currentStatus =
    isOnline === null
      ? "loading"
      : isOnline && isNetworkHealthy
      ? "connected"
      : "disconnected";

  // DÃ©tecter les changements de statut
  useEffect(() => {
    if (
      previousStatusRef.current !== null &&
      previousStatusRef.current !== currentStatus
    ) {
      console.log(
        `ðŸ”„ Changement de statut: ${previousStatusRef.current} â†’ ${currentStatus}`
      );
    }
    previousStatusRef.current = currentStatus;
  }, [currentStatus]);

  // Retourner un objet avec plus d'informations
  return {
    isOnline: isOnline ?? true, // Fallback Ã  true si null (SSR)
    isNetworkHealthy,
    isLoading: isOnline === null,
    status: currentStatus,
    previousStatus: previousStatusRef.current,
  };
}
