generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clients {
  id        String      @id @default(uuid())
  nom       String
  titre     String?
  email     String?
  telephone String?
  mobile    String?
  adresse   String?
  ice       String?
  note      String?
  dette     Float?      @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  commandes Commandes[]
  devies    Devis[]
  factures  Factures[]
}

model Employes {
  id        String   @id @default(uuid())
  nom       String
  cin       String?
  rib       String?
  telephone String?
  adresse   String?
  role      String?
  salaire   Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Produits {
  id                 String              @id @default(uuid())
  designation        String
  categorie          String?
  reference          String?
  prixAchat          Float?
  Unite              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  achatsCommandes    AchatsCommandes[]
  bonLivraisonGroups BlGroupsProduits[]
  CommandesProduits  CommandesProduits[]
  groupProduits      ListProduits[]
}

model Items {
  id          String   @id @default(uuid())
  designation String
  categorie   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CommandesProduits {
  id             String    @id @default(uuid())
  commandeId     String
  commandeNumero String?
  produitId      String
  montant        Float
  quantite       Float
  prixUnite      Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  commande       Commandes @relation(fields: [commandeId], references: [id], onDelete: Cascade)
  produit        Produits  @relation(fields: [produitId], references: [id], onDelete: Cascade)

  @@unique([commandeId, produitId])
}

model Fournisseurs {
  id                   String               @id @default(uuid())
  nom                  String
  email                String?
  telephone            String?
  adresse              String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  ice                  String?
  telephoneSecondaire  String?
  dette                Float                @default(0)
  bonLivraisons        BonLivraison[]
  commandesFournitures CommandeFourniture[]
  Cheques              Cheques[]
}

model Commandes {
  id               String              @id @default(uuid())
  numero           String              @unique
  clientId         String
  statut           String
  sousTotal        Float
  reduction        Int
  total            Float
  note             String?
  typeReduction    String              @default("%")
  avance           Int?
  totalDevi        Float
  totalPaye        Float?
  echeance         DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  achatsCommande   AchatsCommandes[]
  client           Clients             @relation(fields: [clientId], references: [id], onDelete: Cascade)
  commandeProduits CommandesProduits[]
}

model AchatsCommandes {
  id             String     @id @default(uuid())
  produitId      String
  commandeId     String?
  quantite       Float
  prixUnite      Float?
  payer          Boolean
  statut         String
  description    String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  commandeClient Commandes? @relation(fields: [commandeId], references: [id], onDelete: Cascade)
  produit        Produits   @relation(fields: [produitId], references: [id], onDelete: Cascade)

  @@unique([commandeId, produitId])
}

model CommandeFourniture {
  id            String         @id @default(uuid())
  numero        String         @unique
  fournisseurId String
  date          DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  fournisseur   Fournisseurs   @relation(fields: [fournisseurId], references: [id], onDelete: Cascade)
  groups        OrdersGroups[]
}

model OrdersGroups {
  id                   String              @id @default(uuid())
  devisNumero          String?
  clientName           String?
  commandeFournitureId String?
  produits             ListProduits[]
  commandeFourniture   CommandeFourniture? @relation(fields: [commandeFournitureId], references: [id], onDelete: Cascade)
}

model BLGroups {
  id             String             @id @default(uuid())
  devisNumero    String?
  charge         String?
  clientName     String?
  bonLivraisonId String?
  bonLivraison   BonLivraison?      @relation(fields: [bonLivraisonId], references: [id], onDelete: Cascade)
  produits       BlGroupsProduits[]
}

model ListProduits {
  id        String       @id @default(uuid())
  groupId   String
  produitId String
  quantite  Float
  prixUnite Float        @default(0)
  group     OrdersGroups @relation(fields: [groupId], references: [id], onDelete: Cascade)
  produit   Produits     @relation(fields: [produitId], references: [id], onDelete: Cascade)

  @@unique([groupId, produitId])
}

model BlGroupsProduits {
  id        String   @id @default(uuid())
  groupId   String
  produitId String
  quantite  Float
  prixUnite Float    @default(0)
  group     BLGroups @relation(fields: [groupId], references: [id], onDelete: Cascade)
  produit   Produits @relation(fields: [produitId], references: [id], onDelete: Cascade)
}

model Articls {
  id          String   @id @default(uuid())
  deviId      String
  designation String
  montant     Float
  quantite    Float
  prixUnite   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  width       Float?
  length      Float?
  height      Float?   @default(0)
  unite       String   @default("U")
  key         String   @unique
  devi        Devis    @relation(fields: [deviId], references: [id], onDelete: Cascade)
}

model Devis {
  id             String    @id @default(uuid())
  date           DateTime?
  numero         String    @unique
  clientId       String
  statut         String
  statutPaiement String?   @default("impaye")
  sousTotal      Float
  reduction      Int
  total          Float
  note           String?
  typeReduction  String    @default("%")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  tva            Float
  totalPaye      Float?
  echeance       DateTime?
  articls        Articls[]
  client         Clients   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Factures {
  id          String            @id @default(uuid())
  date        DateTime?
  numero      String?
  devisNumero String?
  total       Float?
  clientId    String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  client      Clients           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  articls     FacturesArticls[]
}

model FacturesArticls {
  id          String   @id @default(uuid())
  factureId   String
  designation String
  quantite    Float
  prixUnite   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  width       Float?
  length      Float?
  height      Float?   @default(0)
  unite       String   @default("U")
  // key         String   @unique
  facture     Factures @relation(fields: [factureId], references: [id], onDelete: Cascade)
}

model BonLivraison {
  id             String       @id @default(uuid())
  numero         String       @unique
  reference      String?
  fournisseurId  String
  date           DateTime?
  total          Float
  totalPaye      Float?       @default(0)
  statutPaiement String?      @default("impaye")
  type           String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  groups         BLGroups[]
  fournisseur    Fournisseurs @relation(fields: [fournisseurId], references: [id], onDelete: Cascade)
}

model DepensesVariantes {
  id          String   @id @default(uuid())
  label       String
  montant     Float
  compte      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  numero      String   @unique
}

model Transactions {
  id              String    @id @default(uuid())
  type            String
  montant         Float
  compte          String?
  lable           String?
  reference       String?
  description     String?
  methodePaiement String?
  fournisseurId   String?
  clientId        String?
  date            DateTime?
  typeDepense     String?
  chequeId        String?   @unique
  cheque          Cheques?  @relation(fields: [chequeId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Cheques {
  id            String        @id @default(uuid())
  type          String
  montant       Float
  compte        String?
  numero        String?
  fournisseurId String?
  fournisseur   Fournisseurs? @relation(fields: [fournisseurId], references: [id], onDelete: Cascade)
  dateReglement DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transaction   Transactions?
}

model TachesEmployes {
  id    String @id @default(uuid())
  tache String
}

model Charges {
  id     String @id @default(uuid())
  charge String
}

model CategoriesProduits {
  id        String @id @default(uuid())
  categorie String
}

model ComptesBancaires {
  id     String @id @default(uuid())
  compte String
  solde  Float  @default(0)
}

model ModesPaiement {
  id           String @id @default(uuid())
  modePaiement String
}

model InfoEntreprise {
  id        Int      @id @default(1)
  nom       String
  telephone String
  mobile    String?
  email     String?
  adresse   String
  logoUrl   String?
  slogan    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comptabilite {
  id     Int   @id @default(1)
  caisse Float
}
